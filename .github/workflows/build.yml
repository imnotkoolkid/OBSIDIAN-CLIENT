name: Build Obsidian Client

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    strategy:
      matrix:
        os: [macos-13, windows-latest]
        include:
          - os: windows-latest
            arch: x64
          - os: macos-13
            arch: x64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Get version and name from package.json
        id: get_version_name
        shell: bash
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT

      - name: Create Release (if not exists)
        id: create_release
        uses: softprops/action-gh-release@v2.0.6
        if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', steps.get_version_name.outputs.version) || github.ref_name }}
          name: ${{ github.event_name == 'workflow_dispatch' && format('Release {0}', steps.get_version_name.outputs.version) || github.ref_name }}
          draft: true
          prerelease: false
        continue-on-error: true

      - name: Build Electron App
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2.0.6
        if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', steps.get_version_name.outputs.version) || github.ref_name }}
          files: |
            dist/*
          draft: true
